{"/docs/":{"data":{"-how-to-run#‚öôÔ∏è How to Run":" Make sure you have Docker and Docker Compose installed.\nClone the repository:\ngit clone https://github.com/Konzepte-moderner-Softwareentwicklung/Backend.git cd Backend ","-overview#üöÄ Overview":"This Docker Compose setup orchestrates multiple services that together form a microservices-based application ecosystem. It is only intended for development purposes and includes:\nNATS \u0026 NATS UI: Messaging system with JetStream enabled for event streaming and an admin UI for monitoring. MongoDB: Document-oriented NoSQL database for data storage. MinIO: High-performance, S3-compatible object storage. Various Application Services: Gateway: API gateway routing requests. User Service: Manages user data and authentication. Angebot Service: Business-specific service for offers management. Media Service: Handles media file uploads and processing. Frontend \u0026 NGINX: Web frontend served through NGINX with HTTPS support. ","-services-included#üì¶ Services Included":" Service Description Ports nats Messaging server with JetStream enabled 4222, 8222 nats-ui NATS monitoring UI 31311 mongo MongoDB database 27017 minio Object storage (S3 compatible) 9000 (API), 9001 (Console) gateway API Gateway 8081 user-service User management 8082 angebot-service Offers management 8084 media-service Media handling 8083 frontend Web frontend 8080 nginx Reverse proxy \u0026 HTTPS termination 80, 443 ","microservices-architecture--docker-compose-setup#Microservices Architecture ‚Äî Docker Compose Setup":"Microservices Architecture ‚Äî Docker Compose SetupWelcome to the documentation for the microservices architecture development environment! This repository includes a docker-compose.yml file designed to spin up all necessary services for local development."},"title":"Docs"},"/docs/gateway/":{"data":{"beispiel-client-code-javascript#Beispiel Client-Code (JavaScript)":"Gateway Service - DokumentationDer Gateway-Service ist ein zentraler HTTP-Proxy, der eingehende Anfragen basierend auf dem URL-Pfad an die jeweils zust√§ndigen Microservices weiterleitet.\nZweck Zentrale Anlaufstelle f√ºr Clients Weiterleitung von HTTP-Anfragen an Microservices Einfaches Routing basierend auf URL-Pr√§fixen Einheitliche Schnittstelle f√ºr mehrere Backend-Services Routing-Regeln URL-Pfad-Pr√§fix Zielservice Beschreibung api/user/* User-Service (z.B. http://userservice:8080) Benutzerverwaltung api/angebot/* Angebot-Service (z.B. http://angebotservice:8080) Angebotsverwaltung api/media/* Media-Service (z.B. http://mediaservice:8080) Medienverwaltung / (andere) Frontend oder 404-Fehler Standardseite oder Fehlerseite Nutzung als Client Clients senden alle Anfragen an das Gateway (z.B. https://localhost/api). Das Gateway sorgt automatisch daf√ºr, dass die Anfragen beim richtigen Service landen.\nBeispiel-Endpunkte (√ºber Gateway) HTTP Methode Pfad Zweck GET api/user/ Liste aller Benutzer abrufen POST api/user/ Neuen Benutzer anlegen PUT api/user/{id} Benutzer aktualisieren DELETE api/user/{id} Benutzer l√∂schen GET api/angebot/ Angebote abrufen GET api/media/{id} Mediendatei abrufen GET / Frontend oder Startseite Vorteile Vereinfachte Client-Integration: Ein einziger Endpunkt f√ºr alle Services Flexibles Routing: Einfaches Hinzuf√ºgen neuer Services und Pfade Zentrale Sicherheitskontrolle: Authentifizierung, Logging oder Rate-Limiting k√∂nnen hier zentral implementiert werden Entkopplung der Clients von den Backend-Services Beispiel Client-Code (JavaScript) const BASE_URL = \"https://localhost\"; // Benutzerliste abrufen async function fetchUsers() { const response = await fetch(`${BASE_URL}/users/`); if (!response.ok) throw new Error(\"Fehler beim Abrufen der Benutzer\"); return response.json(); } // Benutzer erstellen async function createUser(userData) { const response = await fetch(`${BASE_URL}/users/`, { method: \"POST\", headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify(userData), }); if (!response.ok) throw new Error(\"Fehler beim Erstellen des Benutzers\"); return response.json(); } // Angebot abrufen async function fetchAngebote() { const response = await fetch(`${BASE_URL}/angebote/`); if (!response.ok) throw new Error(\"Fehler beim Abrufen der Angebote\"); return response.json(); } ","beispiel-endpunkte-√ºber-gateway#Beispiel-Endpunkte (√ºber Gateway)":"","gateway-service---dokumentation#Gateway Service - Dokumentation":"","nutzung-als-client#Nutzung als Client":"","routing-regeln#Routing-Regeln":"","vorteile#Vorteile":"","zweck#Zweck":""},"title":"Gateway"},"/docs/media-service/":{"data":{"basis-url#Basis-URL":"","beispiel-curl-download-bild#Beispiel Curl Download (Bild)":"Media Service - DokumentationDer Media Service stellt Endpunkte zum Upload und Download von Bildern bereit und verwaltet einzelne sowie mehrere (komplexe) Bild-Links.\nBasis-URL /media\nEndpunkte 1. GET /media/image Beschreibung: Test- oder Index-Endpunkt, gibt ‚ÄúHello World‚Äù zur√ºck. Request Body: Kein Response: Plain Text \"Hello World\" Status Codes: 200 OK 2. POST /media/image Beschreibung: Upload eines einzelnen Bildes.\nRequest Header:\nContent-Type: Muss den Medientyp des Bildes angeben (z.B. image/jpeg). UserId: ID des hochladenden Benutzers (wird als Header erwartet). Request Body: Bin√§rdaten des Bildes.\nResponse Body (JSON):\n{ \"name\": \"string\", \"success\": true } Status Codes:\n200 OK bei Erfolg 400 Bad Request, wenn Content-Type oder UserId fehlt 500 Internal Server Error bei Upload-Fehlern 3. GET /media/image/{id} Beschreibung: Download eines Bildes nach Bild-ID (Name).\nURL-Parameter:\nid (string): Bildname/ID. Response:\nBilddaten mit Header Content-Type: image/jpeg Status Codes:\n200 OK bei Erfolg 400 Bad Request, wenn id fehlt 500 Internal Server Error bei Fehlern 4. GET /media/multi/{id} Beschreibung: Gibt eine Liste von Bild-URLs (compound links) zur√ºck, die zu einer zusammengesetzten Entit√§t geh√∂ren.\nURL-Parameter:\nid (UUID): ID der zusammengesetzten Entit√§t. Response Body (JSON): Array von URLs, z.B.\n[ \"/media/image/abc123\", \"/media/image/def456\" ] Status Codes:\n200 OK bei Erfolg 400 Bad Request, wenn id fehlt oder ung√ºltig ist 500 Internal Server Error bei Fehlern 5. POST /media/multi/{id} Beschreibung: Upload eines Bildes zu einer zusammengesetzten Entit√§t.\nURL-Parameter:\nid (string): ID der zusammengesetzten Entit√§t. Request Header:\nContent-Type: Medientyp des Bildes UserId: ID des Benutzers (muss gesetzt sein) Request Body: Bin√§rdaten des Bildes\nResponse: Kein Body, nur Status-Code\nStatus Codes:\n200 OK bei Erfolg 400 Bad Request bei fehlenden Headern oder Parametern 500 Internal Server Error bei Upload-Fehlern Header Header Bedeutung Erforderlich? UserId ID des Nutzers, der hochl√§dt Ja bei Uploads Fehlerhandling 400 Bad Request bei ung√ºltigen oder fehlenden Parametern oder Headern. 500 Internal Server Error bei internen Fehlern. Beispiel Curl Upload (einzelnes Bild) curl -X POST https://localhost/api/media/image \\ -H \"Content-Type: image/jpeg\" \\ -H \"UserId: 1234\" \\ --data-binary \"@pfad/zum/bild.jpg\" Beispiel Curl Download (Bild) curl https://localhost/media/image/abc123 \u003e downloaded.jpg ","beispiel-curl-upload-einzelnes-bild#Beispiel Curl Upload (einzelnes Bild)":"","endpunkte#Endpunkte":"","fehlerhandling#Fehlerhandling":"","header#Header":"","media-service---dokumentation#Media Service - Dokumentation":""},"title":"Media Service"},"/docs/offer-service/":{"data":{"basis-url#Basis-URL":"","beispiel-curl-create-offer#Beispiel Curl Create Offer":"","endpunkte#Endpunkte":"","fehlerhandling#Fehlerhandling":"Offer Service - DokumentationDer Offer Service bietet REST-Endpoints zum Erstellen, Abfragen einzelner Angebote sowie zur Abfrage von Angeboten nach Filterkriterien.\nBasis-URL /offers\nEndpunkte 1. POST /offers/ Beschreibung: Erstellt ein neues Angebot.\nRequest Header:\nUserId (UUID): ID des Benutzers, der das Angebot erstellt. Request Body (JSON):\n{ \"title\": \"string\", \"description\": \"string\", \"price\": \"float\", // weitere Angebotsfelder entsprechend repoangebot.Offer } Response Body (JSON):\n{ \"id\": \"string\", // ID des erstellten Angebots (UUID) \"image_url\": \"string\" // URL f√ºr compound images (vom Media-Service) } Status Codes:\n200 OK bei Erfolg 401 Unauthorized bei ung√ºltiger oder fehlender UserId im Header 500 Internal Server Error bei Fehlern beim Erstellen 2. GET /offers/{id} Beschreibung: Holt ein Angebot anhand seiner ID.\nURL-Parameter:\nid (UUID): ID des Angebots. Response Body (JSON): Objekt des Angebots (entsprechend repoangebot.Offer).\nStatus Codes:\n200 OK bei Erfolg 401 Unauthorized bei ung√ºltiger ID 500 Internal Server Error bei Fehlern 3. GET /offers/ Beschreibung: Holt Angebote, die einem Filter entsprechen.\nRequest Body (JSON):\n{ // Filterkriterien entsprechend repoangebot.Filter, // z.B. Preisbereich, Suchbegriffe etc. } Response Body (JSON): Liste von Angeboten.\nStatus Codes:\n200 OK bei Erfolg 400 Bad Request bei fehlerhaftem Filter-JSON 500 Internal Server Error bei Fehlern Header Header Bedeutung Erforderlich? UserId ID des Nutzers (UUID) Ja bei POST Beispiel Curl Create Offer curl -X POST http://localhost:8083/offers/ \\ -H \"Content-Type: application/json\" \\ -H \"UserId: 123e4567-e89b-12d3-a456-426614174000\" \\ -d '{\"title\": \"Neues Angebot\", \"description\": \"Beschreibung\", \"price\": 19.99}' Fehlerhandling 401 Unauthorized: Ung√ºltige oder fehlende UserId bei gesch√ºtzten Endpunkten. 400 Bad Request: Fehlerhafte Eingaben, z.B. Filter-JSON. 500 Internal Server Error: Interne Fehler beim Service. ","header#Header":"","offer-service---dokumentation#Offer Service - Dokumentation":""},"title":"Angebot Service"},"/docs/user-service/":{"data":{"beispiel-javascript-client#Beispiel JavaScript Client":"","endpunkte#Endpunkte":"","hinweise#Hinweise":"UserService API DokumentationDer UserService stellt eine REST-API f√ºr Benutzerverwaltung, Login und WebAuthn-Authentifizierung bereit.\nHinweis: Die API setzt JWT-Token f√ºr gesch√ºtzte Endpunkte voraus.\nEndpunkte Methode Pfad Beschreibung Auth n√∂tig? GET / Alle Benutzer abrufen Nein POST / Benutzer erstellen Nein GET /{id} Benutzer nach ID abrufen Nein PUT /{id} Benutzer aktualisieren Ja DELETE /{id} Benutzer l√∂schen Ja GET /email?email={email} Benutzer per E-Mail abrufen Nein POST /login Login mit Email und Passwort, JWT erhalten Nein GET /webauthn/register/options WebAuthn Registrierung starten Ja POST /webauthn/register WebAuthn Registrierung abschlie√üen Ja GET /webauthn/login/options?email={email} WebAuthn Login starten Nein POST /webauthn/login WebAuthn Login abschlie√üen Nein Beispiel JavaScript Client const API_BASE = \"https://localhost/api/user\"; // Beispielbase-URL // Hilfsfunktion: HTTP Request mit JSON async function request(path, method = \"GET\", body = null, token = null) { const headers = { \"Content-Type\": \"application/json\" }; if (token) headers[\"Authorization\"] = `Bearer ${token}`; const res = await fetch(`${API_BASE}${path}`, { method, headers, body: body ? JSON.stringify(body) : null, }); if (!res.ok) { const error = await res.text(); throw new Error(`HTTP ${res.status}: ${error}`); } if (res.status === 204) return null; // No Content return await res.json(); } // Beispiel: Alle Benutzer abrufen async function getUsers() { return await request(\"/\"); } // Beispiel: Benutzer erstellen async function createUser(user) { return await request(\"/\", \"POST\", user); } // Beispiel: Benutzer mit JWT aktualisieren async function updateUser(id, user, token) { return await request(`/${id}`, \"PUT\", user, token); } // Beispiel: Benutzer l√∂schen mit JWT async function deleteUser(id, token) { return await request(`/${id}`, \"DELETE\", null, token); } // Beispiel: Login um JWT zu erhalten async function login(email, password) { const data = await request(\"/login\", \"POST\", { email, password }); return data.token; } // Beispielnutzung (async () =\u003e { try { // Benutzer erstellen const newUser = { email: \"max@example.com\", name: \"Max Mustermann\", password: \"secret123\" }; const created = await createUser(newUser); console.log(\"User created with ID:\", created.id); // Login und Token holen const token = await login(newUser.email, newUser.password); console.log(\"JWT Token:\", token); // Alle Benutzer abrufen (ohne Auth) const users = await getUsers(); console.log(\"Users:\", users); // Benutzer aktualisieren mit Token await updateUser(created.id, { name: \"Max M.\" }, token); console.log(\"User updated\"); // Benutzer l√∂schen mit Token await deleteUser(created.id, token); console.log(\"User deleted\"); } catch (e) { console.error(\"Error:\", e.message); } })(); Hinweise F√ºr Endpunkte, die JWT-Token erfordern, muss das Token im Header Authorization: Bearer \u003ctoken\u003e mitgesendet werden. WebAuthn-Endpunkte sind f√ºr die Passwortlose Authentifizierung gedacht und ben√∂tigen Client-seitige Unterst√ºtzung (nicht im JS Beispiel enthalten). Die API unterst√ºtzt CORS, daher k√∂nnen Browser-Clients direkt mit der API kommunizieren. ","userservice-api-dokumentation#UserService API Dokumentation":""},"title":"User Service"}}