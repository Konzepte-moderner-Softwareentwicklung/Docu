{"/Docu/docs/":{"data":{"":"","-how-to-run#⚙️ How to Run":" Make sure you have Docker and Docker Compose installed.\nClone the repository:\ngit clone https://github.com/Konzepte-moderner-Softwareentwicklung/Backend.git cd Backend ","-overview#🚀 Overview":"This Docker Compose setup orchestrates multiple services that together form a microservices-based application ecosystem. It is only intended for development purposes and includes:\nNATS \u0026 NATS UI: Messaging system with JetStream enabled for event streaming and an admin UI for monitoring. MongoDB: Document-oriented NoSQL database for data storage. MinIO: High-performance, S3-compatible object storage. Various Application Services: Gateway: API gateway routing requests. User Service: Manages user data and authentication. Angebot Service: Business-specific service for offers management. Media Service: Handles media file uploads and processing. Frontend \u0026 NGINX: Web frontend served through NGINX with HTTPS support. ","-services-included#📦 Services Included":" Service Description Ports nats Messaging server with JetStream enabled 4222, 8222 nats-ui NATS monitoring UI 31311 mongo MongoDB database 27017 minio Object storage (S3 compatible) 9000 (API), 9001 (Console) gateway API Gateway 8081 user-service User management 8082 angebot-service Offers management 8084 media-service Media handling 8083 frontend Web frontend 8080 nginx Reverse proxy \u0026 HTTPS termination 80, 443 ","microservices-architecture--docker-compose-setup#Microservices Architecture — Docker Compose Setup!":"Microservices Architecture — Docker Compose Setup! Welcome to the documentation for the microservices architecture development environment! This repository includes a docker-compose.yml file designed to spin up all necessary services for local development."},"title":"Docs"},"/Docu/docs/gateway/":{"data":{"beispiel-client-code-javascript#Beispiel Client-Code (JavaScript)":" const BASE_URL = \"https://localhost\"; // Benutzerliste abrufen async function fetchUsers() { const response = await fetch(`${BASE_URL}/users/`); if (!response.ok) throw new Error(\"Fehler beim Abrufen der Benutzer\"); return response.json(); } // Benutzer erstellen async function createUser(userData) { const response = await fetch(`${BASE_URL}/users/`, { method: \"POST\", headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify(userData), }); if (!response.ok) throw new Error(\"Fehler beim Erstellen des Benutzers\"); return response.json(); } // Angebot abrufen async function fetchAngebote() { const response = await fetch(`${BASE_URL}/angebote/`); if (!response.ok) throw new Error(\"Fehler beim Abrufen der Angebote\"); return response.json(); } ","beispiel-endpunkte-über-gateway#Beispiel-Endpunkte (über Gateway)":" HTTP Methode Pfad Zweck GET api/user/ Liste aller Benutzer abrufen POST api/user/ Neuen Benutzer anlegen PUT api/user/{id} Benutzer aktualisieren DELETE api/user/{id} Benutzer löschen GET api/angebot/ Angebote abrufen GET api/media/{id} Mediendatei abrufen GET / Frontend oder Startseite ","gateway-service---dokumentation#Gateway Service - Dokumentation":"Gateway Service - DokumentationDer Gateway-Service ist ein zentraler HTTP-Proxy, der eingehende Anfragen basierend auf dem URL-Pfad an die jeweils zuständigen Microservices weiterleitet.","nutzung-als-client#Nutzung als Client":"Clients senden alle Anfragen an das Gateway (z.B. https://localhost/api). Das Gateway sorgt automatisch dafür, dass die Anfragen beim richtigen Service landen.","routing-regeln#Routing-Regeln":" URL-Pfad-Präfix Zielservice Beschreibung api/user/* User-Service (z.B. http://userservice:8080) Benutzerverwaltung api/angebot/* Angebot-Service (z.B. http://angebotservice:8080) Angebotsverwaltung api/media/* Media-Service (z.B. http://mediaservice:8080) Medienverwaltung / (andere) Frontend oder 404-Fehler Standardseite oder Fehlerseite ","vorteile#Vorteile":" Vereinfachte Client-Integration: Ein einziger Endpunkt für alle Services Flexibles Routing: Einfaches Hinzufügen neuer Services und Pfade Zentrale Sicherheitskontrolle: Authentifizierung, Logging oder Rate-Limiting können hier zentral implementiert werden Entkopplung der Clients von den Backend-Services ","zweck#Zweck":" Zentrale Anlaufstelle für Clients Weiterleitung von HTTP-Anfragen an Microservices Einfaches Routing basierend auf URL-Präfixen Einheitliche Schnittstelle für mehrere Backend-Services "},"title":"Gateway"},"/Docu/docs/login/":{"data":{"":"","-klassische-anmeldung-e-mail--passwort#📥 Klassische Anmeldung: E-Mail \u0026amp; Passwort":"Dieser Service ermöglicht es Benutzern, sich über E-Mail/Passwort oder passwortlos via WebAuthn (Passkey) anzumelden. Die Authentifizierung erzeugt ein Token, das für nachfolgende geschützte Anfragen benötigt wird.\n📥 Klassische Anmeldung: E-Mail \u0026 Passwort 🔧 Methode await client.login(email, password); 🧾 Beschreibung Authentifiziert einen Benutzer mit E-Mail und Passwort. Beim Erfolg wird automatisch ein Authentifizierungstoken gespeichert und eine WebSocket-Verbindung geöffnet.\n📌 Parameter Name Typ Beschreibung email string Benutzer-E-Mail password string Benutzerpasswort ✅ Beispiel await client.login(\"benutzer@example.com\", \"meinPasswort123\"); ⚠️ Fehlerbehandlung Falls die Anmeldung fehlschlägt, wird eine aussagekräftige Fehlermeldung ausgelöst.","-logout#📤 Logout":"🔧 Methode await client.logout(); Beschreibung Setzt das Token zurück. Trennt die WebSocket-Verbindung. ","-passwortlos-anmelden-mit-passkey-webauthn#🔐 Passwortlos anmelden mit Passkey (WebAuthn)":"🔧 Methode await client.loginPasskey(email); 🧾 Beschreibung Führt eine passwortlose Anmeldung per Passkey (z. B. FaceID, TouchID, FIDO2-Sicherheitsschlüssel) durch. Diese Methode nutzt den WebAuthn-Standard zur sicheren Authentifizierung.\n📌 Parameter Name Typ Beschreibung email string Die registrierte Benutzer-E-Mail ✅ Beispiel await client.loginPasskey(\"benutzer@example.com\"); 🔄 Ablauf Holt Anmeldeoptionen vom Server (/api/user/webauthn/login/options). Führt WebAuthn-Authentifizierung durch. Sendet Authentifizierungsdaten an den Server zur Verifikation (/api/user/webauthn/login). Speichert Token und verbindet WebSocket. ⚠️ Fehlerbehandlung Ungültige E-Mail: Es wird eine Exception geworfen. Abbruch oder Verweigerung der WebAuthn-Anfrage durch den Benutzer führt zu einem Fehler. ","-sicherheitshinweise#🔒 Sicherheitshinweise":" Alle Passkey-bezogenen Anfragen verwenden credentials: \"include\" und CORS-Modus. Die Anmeldedaten werden nicht im Klartext übertragen. Die WebAuthn-Authentifizierung erfolgt vollständig im Browser. ","-token-nutzung#🧪 Token-Nutzung":"Das erhaltene Token wird in client.token gespeichert und automatisch in geschützten API-Requests (z. B. Angebotserstellung) verwendet.","-websocket-verbindung#🌐 WebSocket-Verbindung":"Nach erfolgreichem Login (egal ob klassisch oder per Passkey) wird eine WebSocket-Verbindung automatisch aufgebaut:\nclient.connectWebSocket(); Dies ermöglicht z. B. serverseitige Push-Nachrichten in Echtzeit.","-weitere-methoden#📚 Weitere Methoden":"Für Registrierung mit Passkey siehe:\nawait client.registerPasskey(); Für Benutzer-Management siehe Methoden wie getUsers(), createUser(), etc."},"title":"Login"},"/Docu/docs/media-service/":{"data":{"basis-url#Basis-URL":"/media","beispiel-curl-download-bild#Beispiel Curl Download (Bild)":" curl https://localhost/media/image/abc123 \u003e downloaded.jpg ","beispiel-curl-upload-einzelnes-bild#Beispiel Curl Upload (einzelnes Bild)":" curl -X POST https://localhost/api/media/image \\ -H \"Content-Type: image/jpeg\" \\ -H \"UserId: 1234\" \\ --data-binary \"@pfad/zum/bild.jpg\" ","endpunkte#Endpunkte":"1. GET /media/image Beschreibung: Test- oder Index-Endpunkt, gibt “Hello World” zurück. Request Body: Kein Response: Plain Text \"Hello World\" Status Codes: 200 OK 2. POST /media/image Beschreibung: Upload eines einzelnen Bildes.\nRequest Header:\nContent-Type: Muss den Medientyp des Bildes angeben (z.B. image/jpeg). UserId: ID des hochladenden Benutzers (wird als Header erwartet). Request Body: Binärdaten des Bildes.\nResponse Body (JSON):\n{ \"name\": \"string\", \"success\": true } Status Codes:\n200 OK bei Erfolg 400 Bad Request, wenn Content-Type oder UserId fehlt 500 Internal Server Error bei Upload-Fehlern 3. GET /media/image/{id} Beschreibung: Download eines Bildes nach Bild-ID (Name).\nURL-Parameter:\nid (string): Bildname/ID. Response:\nBilddaten mit Header Content-Type: image/jpeg Status Codes:\n200 OK bei Erfolg 400 Bad Request, wenn id fehlt 500 Internal Server Error bei Fehlern 4. GET /media/multi/{id} Beschreibung: Gibt eine Liste von Bild-URLs (compound links) zurück, die zu einer zusammengesetzten Entität gehören.\nURL-Parameter:\nid (UUID): ID der zusammengesetzten Entität. Response Body (JSON): Array von URLs, z.B.\n[ \"/media/image/abc123\", \"/media/image/def456\" ] Status Codes:\n200 OK bei Erfolg 400 Bad Request, wenn id fehlt oder ungültig ist 500 Internal Server Error bei Fehlern 5. POST /media/multi/{id} Beschreibung: Upload eines Bildes zu einer zusammengesetzten Entität.\nURL-Parameter:\nid (string): ID der zusammengesetzten Entität. Request Header:\nContent-Type: Medientyp des Bildes UserId: ID des Benutzers (muss gesetzt sein) Request Body: Binärdaten des Bildes\nResponse: Kein Body, nur Status-Code\nStatus Codes:\n200 OK bei Erfolg 400 Bad Request bei fehlenden Headern oder Parametern 500 Internal Server Error bei Upload-Fehlern ","fehlerhandling#Fehlerhandling":" 400 Bad Request bei ungültigen oder fehlenden Parametern oder Headern. 500 Internal Server Error bei internen Fehlern. ","header#Header":" Header Bedeutung Erforderlich? UserId ID des Nutzers, der hochlädt Ja bei Uploads ","media-service---dokumentation#Media Service - Dokumentation":"Media Service - DokumentationDer Media Service stellt Endpunkte zum Upload und Download von Bildern bereit und verwaltet einzelne sowie mehrere (komplexe) Bild-Links."},"title":"Media Service"},"/Docu/docs/offer-service/":{"data":{"":"Dieser Service ermöglicht das Erstellen, Abrufen und Filtern von Angeboten über eine einfache REST-API. Er unterstützt strukturierte Angebotsobjekte mithilfe von Builder-Pattern-Klassen und basiert auf einer tokenbasierten Authentifizierung.","-api-endpunkte#🌐 API-Endpunkte":" Methode Pfad Beschreibung POST /api/angebot Erstellt ein neues Angebot GET /api/angebot/:id Holt ein Angebot per ID POST /api/angebot/filter Holt eine Liste gefilterter Angebote ","-authentifizierung#🔐 Authentifizierung":"Der Nutzer muss vor dem Erstellen eines Angebots angemeldet sein. Ein gültiges Token wird intern vom Client verwaltet:\nawait client.login(\"email\", \"password\"); // Token wird automatisch gesetzt ","-builder-klassen#🧱 Builder-Klassen":" Klasse Zweck OfferBuilder Erstellen eines vollständigen Angebots SpaceBuilder Beschreibt den verfügbaren Platz ItemBuilder Einzelnes zu transportierendes Objekt SizeBuilder Dimensionen eines Items LocationBuilder Geografische Koordinaten FilterBuilder Filterkriterien für Angebotssuche Jede build()-Methode validiert automatisch alle Pflichtfelder und wirft bei Fehlern eine aussagekräftige Exception.","-fehlerbehandlung#⚠️ Fehlerbehandlung":"Alle HTTP-Aufrufe werfen Exceptions bei Fehlschlägen. Fehlermeldungen werden als Error-Objekte mit Statuscodes und Text bereitgestellt:\ntry { await client.createOffer(myOffer); } catch (err) { console.error(\"Fehler beim Erstellen des Angebots:\", err.message); } ","-installation#🛠️ Installation":" Binde die Client, OfferBuilder, SpaceBuilder, ItemBuilder, etc. Klassen in deinem Frontend ein.\nStelle sicher, dass ein Backend mit folgenden Routen verfügbar ist:\nPOST /api/angebot GET /api/angebot/:id POST /api/angebot/filter ","-verwendung#🚀 Verwendung":"✅ Angebot erstellen const client = new Client(); await client.login(\"user@example.com\", \"password\"); const size = new SizeBuilder().setWidth(100).setHeight(50).setDepth(30); const item = new ItemBuilder().setSize(size).setWeight(15); const space = new SpaceBuilder().addItem(item).setSeats(2); const locationFrom = new LocationBuilder().setLatitude(52.52).setLongitude(13.405); const locationTo = new LocationBuilder().setLatitude(48.1351).setLongitude(11.582); const offer = new OfferBuilder() .setTitle(\"Transport für Möbel\") .setDescription(\"Ich kann dein Sofa mitnehmen.\") .setPrice(50) .setLocationFrom(locationFrom.build()) .setLocationTo(locationTo.build()) .setStartDateTime(new Date().toISOString()) .setEndDateTime(new Date(Date.now() + 3600000).toISOString()) .setCanTransport(space.build()) .build(); await client.createOffer(offer); 🔍 Angebote filtern const filter = new FilterBuilder() .setNameStartsWith(\"Transport\") .setLocationFrom(locationFrom) .setLocationTo(locationTo) .build(); const results = await client.getOffersByFilter(filter); console.log(results); 📄 Angebot abrufen const offer = await client.getOfferById(\"angebot-id-123\"); console.log(offer); ","-websocket-integration-optional#💬 WebSocket Integration (optional)":"Nach erfolgreicher Anmeldung wird automatisch ein WebSocket geöffnet, z.B. für Echtzeitkommunikation:\nclient.registerOnMessage((msg) =\u003e { console.log(\"Neue Nachricht:\", msg); }); "},"title":"Angebot Service"},"/Docu/docs/user-service/":{"data":{"":"Dieser Service ermöglicht das Anlegen und Abrufen von Benutzern über eine einfache API. Die Authentifizierung (Login, Token, WebAuthn) ist hierbei nicht erforderlich.","-abhängigkeiten#📦 Abhängigkeiten":" Die Kommunikation erfolgt über die fetch-API. JSON als Austauschformat. Keine Authentifizierung erforderlich (für die oben genannten Funktionen). ","-beispiel-workflow#📝 Beispiel-Workflow":" const client = new Client(); try { const user = new UserBuilder() .setFirstName(\"Anna\") .setLastName(\"Beispiel\") .setEmail(\"anna@example.com\") .setPassword(\"passwort123\") .build(); const response = await client.createUser(user); console.log(\"Benutzer erfolgreich erstellt:\", response); } catch (error) { console.error(\"Fehler beim Erstellen des Benutzers:\", error); } ","-funktionen#🚀 Funktionen":"🔹 Benutzer anlegen Verwende den bereitgestellten UserBuilder, um einen neuen Benutzer zu erstellen. Dies ist ohne vorherige Anmeldung möglich.\nBeispiel: const client = new Client(); const user = new UserBuilder() .setFirstName(\"Max\") .setLastName(\"Mustermann\") .setEmail(\"max@example.com\") .setPassword(\"geheim123\") .setBirthDate(\"1990-01-01\") .setPhoneNumber(\"0123456789\") .setProfilePicture(\"https://example.com/profile.jpg\") .build(); await client.createUser(user); 🔐 Hinweis: Das Passwort wird direkt im Klartext übergeben. Stelle sicher, dass du HTTPS verwendest.\n🔹 Benutzer abrufen Alle Benutzer abrufen const users = await client.getUsers(); Benutzer nach E-Mail const user = await client.getUserByEmail(\"max@example.com\"); Benutzer nach ID const user = await client.getUserById(\"user_id_xyz\"); ","-tools#🧰 Tools":" Client: Hauptschnittstelle zur API. UserBuilder: Hilfsklasse zum einfachen und validierten Aufbau eines Benutzers. ","-validierung#⚠️ Validierung":"Der UserBuilder erzwingt folgende Pflichtfelder:\nfirstName lastName email password Optional können angegeben werden:\nbirthDate phoneNumber profilePicture Falls Pflichtfelder fehlen, wird beim Aufruf von .build() ein Fehler geworfen."},"title":"User Service"}}